<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.inThresholdApproveMiddleManagement="500" this:Main.inThresholdApproveHigherManagement="10000" this:Main.inMailAccount="scep@zhaw.ch" this:Main.inMailAddressMiddleManagement="scep@zhaw.ch" this:Main.inMailAddressHigherManagement="vqsuda@gmail.com" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System" xmlns:this="clr-namespace:" xmlns:ucas="clr-namespace:UiPath.Core.Activities.Storage;assembly=UiPath.System.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upaf="clr-namespace:UiPath.Persistence.Activities.FormTask;assembly=UiPath.Persistence.Activities" xmlns:upat="clr-namespace:UiPath.Persistence.Activities.Tasks;assembly=UiPath.Persistence.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="inThresholdApproveMiddleManagement" Type="InArgument(x:Double)" />
    <x:Property Name="inThresholdApproveHigherManagement" Type="InArgument(x:Double)" />
    <x:Property Name="inMailAccount" Type="InArgument(x:String)" />
    <x:Property Name="inMailAddressMiddleManagement" Type="InArgument(x:String)" />
    <x:Property Name="inMailAddressHigherManagement" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1022,1831</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="40">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>UiPath.Persistence.Activities.FormTask</x:String>
      <x:String>UiPath.Persistence.Activities.Model.Task</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Persistence.Activities.BaseTask</x:String>
      <x:String>UiPath.Persistence.Activities</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Persistence.Activities.Tasks</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="31">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="MainSequence" sap:VirtualizedContainerService.HintSize="396,1766" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="claimAttachmentsPath" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtClaims" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeProcess ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Process Extract Attachments" sap:VirtualizedContainerService.HintSize="354,165" sap2010:WorkflowViewState.IdRef="InvokeProcess_1" LogEntry="No" LogExit="No" ProcessName="export-claim-attachments-from-emails_studiox">
      <ui:InvokeProcess.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="inFolderNameClaimsToProcess">Posteingang\claimsToProcess</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="inFolderNameClaimsProcessed">Posteingang\claimsProcessed</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="outAttachmentsFolderPath">[claimAttachmentsPath]</OutArgument>
      </ui:InvokeProcess.Arguments>
    </ui:InvokeProcess>
    <ui:BuildDataTable DataTable="[dtClaims]" DisplayName="Build Data Table dtClaims" sap:VirtualizedContainerService.HintSize="354,59" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;ClaimId&quot; msdata:Caption=&quot;&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;CustomerId&quot; msdata:Caption=&quot;&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimTypeId&quot; msdata:Caption=&quot;&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimDateBegin&quot; msdata:Caption=&quot;&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimDateEnd&quot; msdata:Caption=&quot;&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimAmountRequested&quot; msdata:Caption=&quot;&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimAmountToPay&quot; msdata:Caption=&quot;&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimStatus&quot; msdata:Caption=&quot;&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;ClaimDescription&quot; msdata:Caption=&quot;&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;rejection_reasons&quot; msdata:Caption=&quot;&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;" />
    <ParallelForEach x:TypeArguments="x:String" DisplayName="Parallel For Each PDF in Folder of Claims to process" sap:VirtualizedContainerService.HintSize="354,1099" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_1" Values="[Directory.GetFiles(claimAttachmentsPath)]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ActivityAction x:TypeArguments="x:String">
        <ActivityAction.Argument>
          <DelegateInArgument x:TypeArguments="x:String" Name="claimAttachmentPath" />
        </ActivityAction.Argument>
        <Sequence DisplayName="PerPdfSequence" sap:VirtualizedContainerService.HintSize="836,2330" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="claimStatus" />
            <Variable x:TypeArguments="x:String" Name="pdfText" />
            <Variable x:TypeArguments="x:Int32" Name="customerId" />
            <Variable x:TypeArguments="s:DateTime" Name="claimDateBegin" />
            <Variable x:TypeArguments="x:Double" Name="claimAmountRequested" />
            <Variable x:TypeArguments="x:String" Name="claimDescription" />
            <Variable x:TypeArguments="x:Double" Name="claimAmountToPay" />
            <Variable x:TypeArguments="x:String" Name="rejectionReasons" />
            <Variable x:TypeArguments="x:String" Name="bucketPath" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap2010:Annotation.AnnotationText="Extract all claim information from the pdf" DisplayName="Extract Information from one PDF" sap:VirtualizedContainerService.HintSize="794,108" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="matches" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ReadPDFText PreserveFormatting="{x:Null}" DisplayName="Read PDF Text" FileName="[claimAttachmentPath]" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ReadPDFText_1" Range="All" Text="[pdfText]" />
            <ui:Matches sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="Matches_1" Input="[pdfText]" IsBuilderTabModified="False" Pattern="Customer-Id:\s(\d+)" RegexOption="IgnoreCase, Compiled" Result="[matches]" />
            <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_1">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[customerId]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[CInt(matches.First.Groups(1).ToString)]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:Matches sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="Matches_3" Input="[pdfText]" IsBuilderTabModified="False" Pattern="Date:\s(.+)Amount" RegexOption="IgnoreCase, Compiled, Singleline" Result="[matches]" />
            <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="s:DateTime">[claimDateBegin]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="s:DateTime">[DateTime.ParseExact(matches.First.Groups(1).ToString.Trim, "dd.MM.yyyy", Nothing)]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:Matches sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="Matches_4" Input="[pdfText]" IsBuilderTabModified="False" Pattern="Amount requested:\sCHF\s(.+)" RegexOption="IgnoreCase, Compiled, Singleline" Result="[matches]" />
            <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_4">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Double">[claimAmountRequested]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Double">[CDbl(matches.First.Groups(1).ToString)]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:Matches sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="Matches_2" Input="[pdfText]" IsBuilderTabModified="False" Pattern="Description:\s(.+)Type" RegexOption="IgnoreCase, Compiled, Singleline" Result="[matches]" />
            <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_2">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[claimDescription]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[matches.First.Groups(1).ToString.Trim]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Sequence sap2010:Annotation.AnnotationText="Uploads the local file to a folder in the Orchestrator Storage Bucket" DisplayName="Upload pdf to Storage Bucket" sap:VirtualizedContainerService.HintSize="376,550" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Set bucketPath of uploaded file" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_15">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[bucketPath]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">["\claims\" + Path.GetFileName(claimAttachmentPath)]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;path: &quot; + bucketPath]" />
            <ucas:UploadStorageFile TimeoutMS="{x:Null}" Destination="[bucketPath]" DisplayName="Upload Storage File" sap:VirtualizedContainerService.HintSize="334,185" sap2010:WorkflowViewState.IdRef="UploadStorageFile_1" Path="[claimAttachmentPath]" StorageBucketName="DemoBucket" />
          </Sequence>
          <Assign DisplayName="Assign default status" sap:VirtualizedContainerService.HintSize="794,60" sap2010:WorkflowViewState.IdRef="Assign_8">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[claimStatus]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">to_pay</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign default amount to pay" sap:VirtualizedContainerService.HintSize="794,60" sap2010:WorkflowViewState.IdRef="Assign_12">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Double">[claimAmountToPay]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Double">[claimAmountRequested]</InArgument>
            </Assign.Value>
          </Assign>
          <If sap2010:Annotation.AnnotationText="If amount requested is above the defined treshhold value, let a middle manager approve the claim." Condition="[claimAmountRequested &gt; inThresholdApproveMiddleManagement And claimAmountRequested &lt;= inThresholdApproveHigherManagement]" DisplayName="If Approval by middle Management necessary" sap:VirtualizedContainerService.HintSize="794,123" sap2010:WorkflowViewState.IdRef="If_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap2010:Annotation.AnnotationText="Let a human approve the claim by generating a form task. If approved the human also sets the amount, the insurer will pay." DisplayName="Middle Management Approval Sequence" sap:VirtualizedContainerService.HintSize="526,1445" sap2010:WorkflowViewState.IdRef="Sequence_4">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Name="approvedOrRejected" />
                  <Variable x:TypeArguments="upaf:FormTaskData" Name="taskObjectUpdated" />
                  <Variable x:TypeArguments="upaf:FormTaskData" Name="taskObjectToOrchestrator" />
                  <Variable x:TypeArguments="upaf:FormTaskData" Name="taskObjectUpdatedFromOrchestrator" />
                  <Variable x:TypeArguments="upat:StorageUploads" Name="uploadedFiles" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <upaf:CreateFormTask BucketFolderPath="{x:Null}" ExternalTag="{x:Null}" TimeoutMs="{x:Null}" BucketName="DemoBucket" DisplayName="Create Form Task" FormLayout="%[{&quot;label&quot;:&quot;Claim Description&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;in_claimDescription&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Amount Requested&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;delimiter&quot;:true,&quot;requireDecimal&quot;:false,&quot;key&quot;:&quot;in_claimAmountRequested&quot;,&quot;type&quot;:&quot;number&quot;,&quot;input&quot;:true,&quot;decimalLimit&quot;:2},{&quot;label&quot;:&quot;Amount to pay (if not rejected)&quot;,&quot;tableView&quot;:true,&quot;delimiter&quot;:true,&quot;requireDecimal&quot;:false,&quot;key&quot;:&quot;out_claimAmountToPay&quot;,&quot;type&quot;:&quot;number&quot;,&quot;input&quot;:true,&quot;decimalLimit&quot;:2},{&quot;label&quot;:&quot;Rejection Reasons (if rejected)&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;out_rejectionReasons&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;HTML&quot;,&quot;attrs&quot;:[{&quot;attr&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}],&quot;content&quot;:&quot;&lt;embed src={{ data.in_pdf_storage }} width=\&quot;600px\&quot; height=\&quot;500px\&quot;&gt;&lt;/embed&gt;&quot;,&quot;refreshOnChange&quot;:true,&quot;key&quot;:&quot;html&quot;,&quot;type&quot;:&quot;htmlelement&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false},{&quot;label&quot;:&quot;HTML&quot;,&quot;tag&quot;:&quot;div&quot;,&quot;attrs&quot;:[{&quot;attr&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}],&quot;content&quot;:&quot;&lt;a href={{ data.in_pdf_storage }} target=\&quot;_blank\&quot;&gt;{{ data.in_pdf_storage }}: Open file in new window&lt;/a&gt;&quot;,&quot;refreshOnChange&quot;:false,&quot;key&quot;:&quot;html1&quot;,&quot;type&quot;:&quot;htmlelement&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false},{&quot;label&quot;:&quot;Upload&quot;,&quot;tableView&quot;:false,&quot;storage&quot;:&quot;uipathStorageBucketProvider&quot;,&quot;fileTypes&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}],&quot;fileMaxSize&quot;:&quot;100MB&quot;,&quot;key&quot;:&quot;out_uploadedFiles&quot;,&quot;input&quot;:true,&quot;type&quot;:&quot;file&quot;},{&quot;mask&quot;:false,&quot;customClass&quot;:&quot;uipath-button-container&quot;,&quot;tableView&quot;:true,&quot;alwaysEnabled&quot;:false,&quot;type&quot;:&quot;table&quot;,&quot;input&quot;:false,&quot;key&quot;:&quot;key&quot;,&quot;label&quot;:&quot;label&quot;,&quot;rows&quot;:[[{&quot;components&quot;:[{&quot;type&quot;:&quot;button&quot;,&quot;label&quot;:&quot;Approve&quot;,&quot;key&quot;:&quot;submit&quot;,&quot;disableOnInvalid&quot;:true,&quot;input&quot;:true,&quot;alwaysEnabled&quot;:false,&quot;tableView&quot;:true}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Reject&quot;,&quot;showValidations&quot;:false,&quot;theme&quot;:&quot;danger&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;reject&quot;,&quot;type&quot;:&quot;button&quot;,&quot;input&quot;:true}]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]}]],&quot;numRows&quot;:1,&quot;numCols&quot;:6,&quot;reorder&quot;:false},{&quot;label&quot;:&quot;in_pdf_storage&quot;,&quot;hidden&quot;:true,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;in_pdf_storage&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true}]" GenerateInputFields="False" sap:VirtualizedContainerService.HintSize="484,371" sap2010:WorkflowViewState.IdRef="CreateFormTask_1" TaskCatalog="[&quot;ClaimApprovementTasks&quot;]" TaskOutput="[taskObjectToOrchestrator]" TaskPriority="[TaskPriority.Medium]" TaskTitle="[&quot;Approve Claim &quot; + claimDescription]">
                  <upaf:CreateFormTask.FormData>
                    <InArgument x:TypeArguments="x:String" x:Key="in_claimDescription">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="claimDescription" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Double" x:Key="in_claimAmountRequested">
                      <mva:VisualBasicValue x:TypeArguments="x:Double" ExpressionText="claimAmountRequested" />
                    </InArgument>
                    <OutArgument x:TypeArguments="x:Double" x:Key="out_claimAmountToPay">
                      <mva:VisualBasicReference x:TypeArguments="x:Double" ExpressionText="claimAmountToPay" />
                    </OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_rejectionReasons">
                      <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="rejectionReasons" />
                    </OutArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_pdf_storage">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="bucketPath" />
                    </InArgument>
                    <OutArgument x:TypeArguments="upat:StorageUploads" x:Key="out_uploadedFiles">
                      <mva:VisualBasicReference x:TypeArguments="upat:StorageUploads" ExpressionText="uploadedFiles" />
                    </OutArgument>
                  </upaf:CreateFormTask.FormData>
                </upaf:CreateFormTask>
                <ui:SendOutlookMail Bcc="{x:Null}" Cc="{x:Null}" MailMessage="{x:Null}" ReplyTo="{x:Null}" TimeoutMS="{x:Null}" Account="[inMailAccount]" Body="[taskObjectToOrchestrator.ActionUrl]" DisplayName="Send Outlook Mail Message" sap:VirtualizedContainerService.HintSize="484,145" sap2010:WorkflowViewState.IdRef="SendOutlookMail_1" Importance="Normal" IsBodyHtml="False" IsDraft="False" Sensitivity="Normal" Subject="[&quot;Approve Claim &quot; + claimDescription]" To="[inMailAddressMiddleManagement]">
                  <ui:SendOutlookMail.Files>
                    <scg:List x:TypeArguments="InArgument(x:String)" Capacity="0" />
                  </ui:SendOutlookMail.Files>
                </ui:SendOutlookMail>
                <upaf:WaitForFormTaskAndResume StatusMessage="{x:Null}" TimeoutMs="{x:Null}" WaitItemDataObject="{x:Null}" DisplayName="Wait for Form Task and Resume" sap:VirtualizedContainerService.HintSize="484,222" sap2010:WorkflowViewState.IdRef="WaitForFormTaskAndResume_1" TaskAction="[approvedOrRejected]" TaskInput="[taskObjectToOrchestrator]" TaskOutput="[taskObjectUpdatedFromOrchestrator]" />
                <If Condition="[uploadedFiles.Count &gt;= 1]" DisplayName="If an uploaded file exists download it locally" sap:VirtualizedContainerService.HintSize="484,362" sap2010:WorkflowViewState.IdRef="If_5">
                  <If.Then>
                    <ucas:DownloadStorageFile TimeoutMS="{x:Null}" Destination="[&quot;C:\Users\scep\Desktop\&quot; + uploadedFiles(0).OriginalName]" DisplayName="Download Storage File" sap:VirtualizedContainerService.HintSize="334,185" sap2010:WorkflowViewState.IdRef="DownloadStorageFile_1" Path="[uploadedFiles(0).FilePath]" StorageBucketName="DemoBucket" />
                  </If.Then>
                </If>
                <If Condition="[Not approvedOrRejected.Equals(&quot;submit&quot;)]" DisplayName="If claim not approved" sap:VirtualizedContainerService.HintSize="484,51" sap2010:WorkflowViewState.IdRef="If_1">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,252" sap2010:WorkflowViewState.IdRef="Sequence_6">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="rejectionReasons" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[claimStatus]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">rejected</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_13">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">[claimAmountToPay]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">0</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
            </If.Then>
          </If>
          <If sap2010:Annotation.AnnotationText="If amount requested is above the defined treshhold value, let a higher manager approve the claim." Condition="[claimAmountRequested &gt; inThresholdApproveHigherManagement]" DisplayName="If Approval by Higher Management necessary" sap:VirtualizedContainerService.HintSize="794,1502" sap2010:WorkflowViewState.IdRef="If_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap2010:Annotation.AnnotationText="Let a human approve the claim by generating a form task. If approved the human also sets the amount, the insurer will pay." DisplayName="Higher Management Approval Sequence" sap:VirtualizedContainerService.HintSize="758,1294" sap2010:WorkflowViewState.IdRef="Sequence_9">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Name="approvedOrRejected" />
                  <Variable x:TypeArguments="upaf:FormTaskData" Name="taskObjectCreated" />
                  <Variable x:TypeArguments="upaf:FormTaskData" Name="taskObjectUpdated" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <upaf:CreateFormTask BucketFolderPath="{x:Null}" BucketName="{x:Null}" ExternalTag="{x:Null}" TimeoutMs="{x:Null}" DisplayName="Create Form Task" FormLayout="%[{&quot;label&quot;:&quot;Claim Description&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;in_claimDescription&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Amount Requested&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;delimiter&quot;:true,&quot;requireDecimal&quot;:false,&quot;key&quot;:&quot;in_claimAmountRequested&quot;,&quot;type&quot;:&quot;number&quot;,&quot;input&quot;:true,&quot;decimalLimit&quot;:2},{&quot;label&quot;:&quot;Amount to pay (if not rejected)&quot;,&quot;tableView&quot;:true,&quot;delimiter&quot;:true,&quot;requireDecimal&quot;:false,&quot;key&quot;:&quot;out_claimAmountToPay&quot;,&quot;type&quot;:&quot;number&quot;,&quot;input&quot;:true,&quot;decimalLimit&quot;:2},{&quot;label&quot;:&quot;Rejection Reasons (if rejected)&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;out_rejectionReasons&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;mask&quot;:false,&quot;customClass&quot;:&quot;uipath-button-container&quot;,&quot;tableView&quot;:true,&quot;alwaysEnabled&quot;:false,&quot;type&quot;:&quot;table&quot;,&quot;input&quot;:false,&quot;key&quot;:&quot;key&quot;,&quot;label&quot;:&quot;label&quot;,&quot;rows&quot;:[[{&quot;components&quot;:[{&quot;type&quot;:&quot;button&quot;,&quot;label&quot;:&quot;Approve&quot;,&quot;key&quot;:&quot;submit&quot;,&quot;disableOnInvalid&quot;:true,&quot;input&quot;:true,&quot;alwaysEnabled&quot;:false,&quot;tableView&quot;:true}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Reject&quot;,&quot;showValidations&quot;:false,&quot;theme&quot;:&quot;danger&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;reject&quot;,&quot;type&quot;:&quot;button&quot;,&quot;input&quot;:true}]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]}]],&quot;numRows&quot;:1,&quot;numCols&quot;:6,&quot;reorder&quot;:false}]" GenerateInputFields="False" sap:VirtualizedContainerService.HintSize="716,371" sap2010:WorkflowViewState.IdRef="CreateFormTask_2" TaskCatalog="[&quot;ClaimApprovementTasks&quot;]" TaskOutput="[taskObjectCreated]" TaskPriority="[TaskPriority.Medium]" TaskTitle="[&quot;Approve Claim &quot; + claimDescription]">
                  <upaf:CreateFormTask.FormData>
                    <InArgument x:TypeArguments="x:String" x:Key="in_claimDescription">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="claimDescription" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Double" x:Key="in_claimAmountRequested">
                      <mva:VisualBasicValue x:TypeArguments="x:Double" ExpressionText="claimAmountRequested" />
                    </InArgument>
                    <OutArgument x:TypeArguments="x:Double" x:Key="out_claimAmountToPay">
                      <mva:VisualBasicReference x:TypeArguments="x:Double" ExpressionText="claimAmountToPay" />
                    </OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_rejectionReasons">
                      <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="rejectionReasons" />
                    </OutArgument>
                  </upaf:CreateFormTask.FormData>
                </upaf:CreateFormTask>
                <upat:AssignTasks FailedTaskAssignments="{x:Null}" TimeoutMs="{x:Null}" DisplayName="Assign Tasks" sap:VirtualizedContainerService.HintSize="716,222" sap2010:WorkflowViewState.IdRef="AssignTasks_1" TaskAssignmentType="[TaskAssignmentType.Assign]" TaskUserAssignments="[New List(Of TaskUserAssignment) From {New TaskUserAssignment(taskObjectCreated.Id, inMailAddressHigherManagement)}]" />
                <ui:SendOutlookMail Bcc="{x:Null}" Cc="{x:Null}" MailMessage="{x:Null}" ReplyTo="{x:Null}" TimeoutMS="{x:Null}" Account="[inMailAccount]" Body="[taskObjectCreated.ActionUrl]" DisplayName="Send Outlook Mail Message" sap:VirtualizedContainerService.HintSize="716,145" sap2010:WorkflowViewState.IdRef="SendOutlookMail_2" Importance="Normal" IsBodyHtml="False" IsDraft="False" Sensitivity="Normal" Subject="[&quot;Approve Claim &quot; + claimDescription]" To="[inMailAddressHigherManagement]">
                  <ui:SendOutlookMail.Files>
                    <scg:List x:TypeArguments="InArgument(x:String)" Capacity="0" />
                  </ui:SendOutlookMail.Files>
                </ui:SendOutlookMail>
                <upaf:WaitForFormTaskAndResume StatusMessage="{x:Null}" TimeoutMs="{x:Null}" WaitItemDataObject="{x:Null}" DisplayName="Wait for Form Task and Resume" sap:VirtualizedContainerService.HintSize="716,222" sap2010:WorkflowViewState.IdRef="WaitForFormTaskAndResume_2" TaskAction="[approvedOrRejected]" TaskInput="[taskObjectCreated]" TaskOutput="[taskObjectUpdated]" />
                <If Condition="[Not approvedOrRejected.Equals(&quot;submit&quot;)]" DisplayName="If claim not approved" sap:VirtualizedContainerService.HintSize="716,51" sap2010:WorkflowViewState.IdRef="If_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,352" sap2010:WorkflowViewState.IdRef="Sequence_8">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:String" Name="rejectionReasons" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_10">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[claimStatus]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">rejected</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_11">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[rejectionReasons]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[rejectionReasons]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_14">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Double">[claimAmountToPay]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Double">0</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                </If>
              </Sequence>
            </If.Then>
          </If>
          <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Guid.NewGuid,customerId,Nothing,claimDateBegin,Nothing,claimAmountRequested,claimAmountToPay,claimStatus,rejectionReasons,claimDescription}]" DataTable="[dtClaims]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="AddDataRow_1" />
        </Sequence>
      </ActivityAction>
    </ParallelForEach>
    <ui:Delete ContinueOnError="{x:Null}" DisplayName="Delete Attachments Folder" sap:VirtualizedContainerService.HintSize="354,79" sap2010:WorkflowViewState.IdRef="Delete_1" Path="[claimAttachmentsPath]" />
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File Save To CMS Mock" sap:VirtualizedContainerService.HintSize="354,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="SaveDataTableToCMSMock.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="sd:DataTable" x:Key="inDataTable">[dtClaims]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
  </Sequence>
</Activity>